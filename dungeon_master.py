from users.models import User, Character, Stats
from secret_data import DM_PARAMS
import django
from openai_api import generate_text, generate_text_by_msgs
import re
from asgiref.sync import sync_to_async

MAX_CONTENT_SIZE = 1024

def extract_parts(text):
    pattern = r'\[\d+\](.*?)(?=\[\d+\]|$)'
    parts = [part.replace("\n", " ") for part in re.findall(pattern, text, re.S)]
    return parts

newline = "\n"

try:
    userDM = User.objects.get(username=DM_PARAMS["username"])
    if Character.objects.filter(user=userDM).exists():
        characterDM = Character.objects.get(user=userDM)
        statsDM = characterDM.stats
    else:
        statsDM = Stats(custom_class="DungeonMaster", custom_race="Master", level=0, stre=0, dex=0, cos=0, inte=0, wis=0, cha=0, stre_down=0, dex_down=0, cos_down=0, inte_down=0, wis_down=0, cha_down=0, proficiency_bonus=0, passive_perception=0, stre_saving=0, dex_saving=0, cos_saving=0, inte_saving=0, wis_saving=0, cha_saving=0, acrobatics=0, animals=0, arcana=0, athletics=0, deception=0, history=0, insight=0, intimidation=0, investigation=0, medicine=0, nature=0, perception=0, performance=0, persuasion=0, religion=0, sleightofhand=0, stealth=0, survival=0, proficiencies=0, current_hit=0, attacks_spellcasting="", equipment="", personality_traits="", ideals="", bonds="", flaws="", features_traits="", success=0, failure=0, armour=0, initiative=0, speed=0)
        statsDM.save()
        characterDM = Character(stats=statsDM, image="character_pics/dm.jpg", name="DungeonMaster", user=userDM)
        characterDM.save()
        print("DM character created")
except Exception:
    userDM, characterDM, statsDM = None, None, None
    print("Cannot import DM")

def get_character_info(character):
    stats = character.stats
    system_prompt = "Твоя задача какможно сильнее сжать следующую информацию так, чтобы она отражала основные характеристики героя. Удаляй ту информацию, которая не сказывается (либо сказывается мало) на характере персонажа!"
    constitution = "худое"            
    if 10 < stats.armour < 15:
        constitution = "среднее"
    elif 15 <= stats.armour < 25:
        constitution = "крепкое"
    elif 25 <= stats.armour < 40:
        constitution = "толстое"
    elif 40 <= stats.armour:
        constitution = "огромное"
    newline = "\n"
    prompt = f"""
Класс героя:
{stats.custom_class.replace(newline, " ")}

Раса героя:
{stats.custom_race.replace(newline, " ")}

Навыки:
{stats.proficiencies.replace(newline, " ")}

Оружие/инвентарь:
{stats.equipment.replace(newline, " ")}

Черты характера: 
{stats.personality_traits.replace(newline, " ")}

Идеалы:
{stats.ideals.replace(newline, " ")}

Привязанности:
{stats.bonds.replace(newline, " ")}

Слабости:
{stats.flaws.replace(newline, " ")}

Умения и способности:
{stats.features_traits.replace(newline, " ")}

Телосложение:
{constitution}
"""
    return generate_text(prompt, system_prompt).replace("\n", "")
    
def classify_personal_prompt(prompt):
    """1 - trash; 2 - general; 3 - ask; 4 - action"""
    system_prompt = """Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев. Твоя задача классифицировать этот запрос в один из следующих классов:
1) пользователь просто что-то сказал, либо не туда обратился. Скорее всего он не заинтересован в помощи DM/ничего не хочет узнать. Это, так называемый, пустой промпт.
2) обращение пользователя направлено на сокомандников
3) пользователь пытается спросить, можно ли что-то ему сделать (возможно, и как)
4) пользователь совершает какое-то действие

Твой ответ должен быть в формате: [[число]]

Примеры классификации:
"Абракадабра!" - [[1]]
"Эй, боб, привет)" - [[2]]
"Как думаете, я могу это сделать?" - [[2]]
"Я могу заброситься на спину этого дракона?" - [[3]]
"Я хочу взять камень" - [[4]]

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его!
"""
    prompt = "Запрос пользователя:\n" + prompt
    out = generate_text(prompt, system_prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 1

def check_need_equipment(prompt):
    "0 - no; 1 - no; 2 - yes"
    system_prompt = """Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев на совершение действия. Твоя задача классифицировать этот запрос в один из следующих классов:
0) данное действие пользователь может совершить без предметов
1) для совершения данного действия пользователю необходимы какие-то предметы, но в самом запросе пользователь их уже берет
2) для совершения данного действия пользователю необходимы какие-то предметы

Твой ответ должен быть в формате: [[число]]

Примеры классификации:
"Я говорю сгинь!!!!!!" - [[0]]
"Я флиртую с барменом" - [[0]]
"Я взбираюсь на спину дракона" - [[0]]
"Я колдую ауру" - [[0]]
"Я беру и бросаю в него камень" - [[1]]
"Я вытягиваю из его ножн нож и пронзаю его ногу" - [[1]]
"Я кидаю копье в бошку твари" - [[2]]
"Я стреляю в него" - [[2]]

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его!
"""
    prompt = "Запрос пользователя:\n" + prompt
    out = generate_text(prompt, system_prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 0

def check_need_spells(prompt):
    "0 - no; 1 - yes"
    system_prompt = """Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев на совершение действия. Твоя задача классифицировать этот запрос в один из следующих классов:
0) данное действие пользователь может совершить без знание заклятий
1) для совершения данного действия пользователю необходимы знания чар/магии/заклятий

Твой ответ должен быть в формате: [[число]]

Примеры классификации:
"Я говорю сгинь!!!!!!" - [[0]]
"Я флиртую с барменом" - [[0]]
"Я взбираюсь на спину дракона" - [[0]]
"Разговариваю с кроликом" - [[0]]
"Я колдую ауру" - [[1]]
"Бросаюсь огненными шарами" - [[1]]
"Читаю мысли старика" - [[1]]

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его!
"""
    prompt = "Запрос пользователя:\n" + prompt
    out = generate_text(prompt, system_prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 0

def check_spells(prompt, spells):
    "0 - no; 1 - yes"
    prompt = f"""Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев на совершение заклинания, чар или магии. Твоя задача понять, владеет ли игрок данными навыками.

Твой ответ должен быть в формате: [[число]]
0 - навыка нет; 1 - навык есть

Примеры классификации:

Навыки: владения огнем, владение силами природы, умение взлетать
Запрос: Поджигаю целый лес
Вывод: [[1]]

Навыки: разговор с животными
Запрос: Пытаюсь прочесть мысли у старика
Вывод: [[0]]

Навыки магии у игрока:
{spells}

Запрос игрока:
{prompt}

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его!
"""
    out = generate_text(prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 0

def check_equipment(prompt, equipment):
    "0 - no; 1 - yes"
    prompt = f"""Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев на совершение действия с использованием предметов. Твоя задача понять, есть ли у игрока в инвентаре необходимые предметы.

Твой ответ должен быть в формате: [[число]]
0 - предмета нет; 1 - предмет есть

Примеры классификации:

Инвентарь: Топор, секира, флейта
Запрос: пытаюсь отрубить секирой голову странника
Вывод: [[1]]

Инвентарь: веревка, камни
Запрос: я создаю рогатку
Вывод: [[1]]

Инвентарь: седло, подопытные мыши и кролики
Запрос: пытаюсь взлететь в воздух с помощью ковра-самолета
Вывод: [[0]]

Инвентарь у игрока:
{spells}

Запрос игрока:
{prompt}

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его!
"""
    out = generate_text(prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 0

def classify_throws_skills(prompt):
    "0 - nothing; 1 - throws; 2 - skills"
    system_prompt = """Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев на совершение какого-либо действия. Твоя задача классифицировать этот запрос в один из следующих классов, принимая ввиду, какие навыки пользователю необходимы:
0) запрос не требует никаких навыков
1) запрос требует от пользователя каких-то базовых навыков (силы или ловкости, или телосложения, или мудрости, или харизмы, или восприятия)
2) запрос требует от пользователя каких особых навыков (акробатика, разговор с животными, восприятие реальности, знание истории, медицины)

Твой ответ должен быть в формате: [[число]]

Примеры классификации:
"Я отвечаю: а пошел-ка ты к черту!" - [[0]]
"Я иду и спотыкаюсь об валун" - [[0]]
"Мое животное кидает копье в мантикору" - [[1]] (связано с ловкостью)
"Я пытаюсь флиртовать с барменом" - [[1]] (связано с харизмой)
"Мои глаза вглядываются в темноту" - [[1]] (связано с восприятием)
"Он подманивает едой котенка" - [[2]] (связано с обращением с животными)
"Пытаюсь его вылечить, делая искусственное дыхание" - [[2]] (связано с медициной)
"Своими руками делаю шалаш" - [[2]] (связано с навыками выживания)

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его!
"""
    prompt = "Запрос пользователя:\n" + prompt
    out = generate_text(prompt, system_prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 0

def get_exact_throws(prompt):
    "just indexes"
    system_prompt = """Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев на совершение какого-либо действия. Твоя задача классифицировать этот запрос в один из следующих классов, принимая ввиду, какие навыки пользователю необходимы:
1) сила
2) ловкость
3) телосложение
4) интеллект
5) мудрость
6) харизма
7) восприятие реальности

Твой ответ должен быть в формате: [[число]]

Примеры классификации:
"Поднимаю это дерево" - [[1]]
"Запрыгиваю на спину огромной змее" - [[2]]
"Кричу всем: 'Посторонись!', - и бегу, снося все вокруг" - [[3]]
"Пытаюсь сопоставить реальность с квантовой вселенной" - [[4]]
"Пытаюсь понять, что эти математические иероглифы означают" - [[5]]
"Уговариваю стражника отдать ключи" - [[6]]
"Присматриваюсь в темноту" - [[7]]

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его!
"""
    prompt = "Запрос пользователя:\n" + prompt
    out = generate_text(prompt, system_prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 7

def get_exact_skills(prompt):
    "just indexes"
    system_prompt = """Ты - DungeonMaster в игре Dungeon&Dragons. Тебе поступил запрос одного из героев на совершение какого-либо действия. Твоя задача классифицировать этот запрос в один из следующих классов, принимая ввиду, какие навыки пользователю необходимы:
1) - Акробатика
2) - Анализ
3) - Атлетика
4) - Восприятие
5) - Выживание
6) - Выступление
7) - Запугивание
8) - История
9) - Ловкость рук
10) - Магия
11) - Медицина
12) - Обман
13) - Природа
14) - Проницательность
15) - Религия
16) - Скрытность
17) - Убеждение
18) - Уход за животными

Твой ответ должен быть в формате: [[число]]

Примеры классификации:
Акробатика [[1]]: Перепрыгнуть через пропасть
Анализ [[2]]: Определить состав зелья
Атлетика [[3]]: Подняться на скалу
Восприятие [[4]]: Замечать скрытые двери
Выживание [[5]]: Найти путь в лесу
Выступление [[6]]: Спеть песню в таверне
Запугивание [[7]]: Заставить стражника отступить
История [[8]]: Узнать о древней руине
Ловкость рук  [[9]]: Украсть ключи незаметно
Магия [[10]]: Распознать заклинание.
Медицина [[11]]: Оказать первую помощь раненому.
Обман [[12]]: Убедить стражу, что ты купец.
Природа [[13]]: Определить опасное растение.
Проницательность [[14]]: Понять, что кто-то лжёт.
Религия [[15]]: Распознать символ бога.
Скрытность [[16]]: Подкрасться к врагу.
Убеждение [[17]]: Уговорить торговца снизить цену.
Уход за животными [[18]]: Успокоить раненую лошадь.

Помни, что ты не отвечаешь на запрос пользователя, а лишь классифицируешь его в формате:
[[число]]
"""
    prompt = "Запрос пользователя:\n" + prompt
    out = generate_text(prompt, system_prompt)
    try:
        return int(re.findall(r'\[\[(\d+)\]\]', out)[0])
    except Exception:
        return 5

def create_scenario_parts(characters):
    prompt = """Ты - Dungeon Master в игре Dungeon&Dragons. Твоя задача придумать сценарий так, чтобы каждая его часть представляла из себя какую-то единичную активность. Каждая часть/активность должна быть описана кратко, их должно быть много (около 20)

Оформляй сценарий в таком виде:
[1]
<Первая часть сценария>
[2]
<Вторая часть сценари>
И т. д.

Ты придумываешь сценарий для следующих героев:"""
    for i, character in enumerate(characters, start=1):
        prompt += f"{i}) " + character.info + "\n"
    prompt += "Попытайся сделать так, чтобы сценарий понравился всем. Помни, что последняя часть сценария должна быть завершающей, не подразумевающей продолжение!"
    txt = generate_text(prompt)
    return extract_parts(txt)

def make_content_shorter(content):
    prompt = f"""Ты - Dungeon Master в игре Dungeon&Dragons.Твоя задача как можно сильнее сжать следующую информацию так, чтобы она отражала основные произошедшие события. Удаляй ту информацию, которая не сказывается (либо сказывается мало) на будущем!
Информация:
{content}
"""
    return generate_text(prompt)

@sync_to_async
def sync_make_content_shorter(*args, **kwargs):
    return make_content_shorter(*args, **kwargs)
    

def get_characters_info_prompt(characters):
    prompt = "В твой сценарий играют следующие персонажи:\n"
    charid2id = {}
    for i, character in enumerate(characters, start=1):
        prompt += f"Персонаж {i}: " + character.info + "\n"
        charid2id[character.id] = i + 1
    return prompt

#prompt_class: 3 - ask; 4 - action
def generate_answer(characters, general_chat, chat, prompt_class=4, cannot_make_prompt=0, throws_skills_prompt_adding=""):
    charid2id = {}
    for i, character in enumerate(characters, start=1):
        charid2id[character.id] = i
    
    if any(cannot_make_prompt):
        insertion = 'контекст, в котором говорится, что игрок не может совершить данное действие по причине: ' + cannot_make_prompt
    elif prompt_class == 4:
        insertion = 'продолжение сюжета'
    else:
        #if prompt_class == 3:
        insertion = 'ответ на вопрос пользователя, но без генерации продолжения сценария' 
    
    prompt0 = f"""Ты - Dungeon Master в игре Dungeon&Dragons. Тебе будут доступны все действия героев до этого момента. Тебе необходимо сгенерировать {insertion}.
{get_characters_info_prompt(characters)}"""
    messages = [{"role": "system", "content": prompt0}]
    
    full_content = ""
    for message in reversed(general_chat.message_set.all()):
        if any(message.short_content):
            content = message.short_content
        else:
            content = message.content
        if message.character == characterDM:
            role = "system"
        else:
            role = "user"
            content = f"Персонаж {charid2id[message.character.id]}:\n" + content
        if len(full_content + content) > MAX_CONTENT_SIZE:
            content = content[:MAX_CONTENT_SIZE - len(full_content) + 2]
        full_content += content
        messages.insert(1, {"role": role, "content": content})
        if len(full_content) > MAX_CONTENT_SIZE:
            break
    
    scenario_parts = list(general_chat.room.scenario.scenariopart_set.all())
    current_part = general_chat.room.scenario.scenariostate.current_part
    prompt_last = f"""Помни, что ты - Dungeon Master в игре Dungeon&Dragons. Тебе необходимо сгенерировать {insertion}.
Сейчас игроки находятся в этой части сюжета:
{current_part.content}

{get_characters_info_prompt(characters)}
"""
    if not any(cannot_make_prompt):
        if prompt_class == 4:
            if current_part.is_final:
                prompt_last += """\nНа данный момент герои находятся на финальной части сценария. Тебе необходимо подвести их к финалу/заключению, но помни, что ты их лишь подводишь! Ты не обязан ими выполнять какие-либо действия. Также не обязан сразу прекращать сюжет в данном месте - сюжет нужно прекращать, только если герои сами подошли к заключинию (а не ты их резко за ручку привел)
Если тебе требуется говорить за какого-то стороннего персонажа, то говори и сочиняй его речь. Описывай всё окружение
"""
            else:
                next_part = scenario_parts[scenario_parts.index(current_part) + 1]
                prompt_last += f"""\nТебе необходимо подводить игроков к следующей части сюжета:
{next_part.content}

Помни, что тебе необходимо ПОДВЕСТИ их к следующему этапу, но помни, что ты их лишь подводишь! Ты не обязан ими выполнять какие-либо действия. Также ты не должен сразу прекращать сюжет в данном месте.
Если тебе требуется говорить за какого-то стороннего персонажа, то говори и сочиняй его речь. Описывай всё окружение
НЕ ПИШИ много текста. НЕ ДЕЛАЙ очень много действий. Помни, что ты в следующий раз также продолжишь сюжет и "подведение к другой части"! Твое сообщение не должно быть большим!
"""
        else:
            prompt_last += "Помни, что ты лишь отвечаешь на вопрос пользователя, а не генерируешь сценарий! Если требуется, то дай рекомендации/советы игроку"
    else:
        prompt_last += "Помни, что ты лишь генерируешь контекст для отказа игроку в действии, а не генерируешь сценарий! Если требуется, то дай рекомендации/советы игроку"
    if any(throws_skills_prompt_adding):
        messages += [{"role": "system", "content": throws_skills_prompt_adding}]
        prompt_last += "\n\nНЕ ЗАБЫВАЙ УЧЕСТЬ РЕЗУЛЬТАТ ПОСЛЕДНЕГО БРОСКА КУБИКА ИГРОКОМ"
    messages += [{"role": "system", "content": prompt_last}]
    txt = generate_text_by_msgs(messages=messages)
    return txt

@sync_to_async
def sync_generate_answer(*args, **kwargs):
    return generate_answer(*args, **kwargs)

def what_equipment_changed(message):
    "[0] - no; [1, cmd, items] - yes"
    system_prompt = """Ты - DungeonMaster в игре Dungeon&Dragons. Ты уже создал часть событий, в которых участвует игрок. Твоя задача узнать, изменится ли инвентарь игрока в течение данной части сценария. Если изменится, то понять, как и что именно измениться в инвентаре.

Твой вывод может быть представлен в следующих видах:
[[0]] - инвентарь не изменится
[[1]] [[действие (например, добавить, удалить)]] [[над какими предметами происходит действие]] - инвентарь изменится так: к нему необходимо применить какие-то указанные действия к указанным предметам

Примеры ответов:

1)
Запрос игрока:
На ярмарке царила атмосфера веселья: вокруг слышались смех и звуки толпы, яркие костюмы и шалости уличных артистов привлекали внимание. Бард, настроившись на выступление, заметил, как внимание зрителей постепенно переключается на него.
Он берет в руки лютню и начинает играть живую мелодию, вызывая восторг у зрителей.
Вывод:
[[0]]

2)
Запрос игрока:
Ты пытаешься ударить стражника, но безуспешно. Тогда ты колдуешь магию: создаешь огненный шар, которым сжигаешь все его тело.
Ты снимаешь с него доспехи, но решаешь их выбросить. Присматриваясь к оружие, ты решаешь забрать копье и щит.
Вывод:
[[1]] [[добавить]] [[копье и щит]]

3)
Запрос игрока:
Во время представления Бард ощущает, что этот незнакомец может знать что-то важное о пропавшем артефакте. Попробовать Разговорить его — не сработает ли удача? Ты решаешь подарить ему лютню.
Вывод:
[[1]] [[удалить]] [[лютня]]

Помни, что ситуации, когда необходимо что-то сделать с инвентарем, не частые - проводи изменения только в явных случаях.
"""
    prompt = "Запрос игрока:\n" + message
    out = generate_text(prompt, system_prompt)
    try:
        out = re.findall(r'\[\[(.*?)\]\]', out)[:3]
        if out[0] not in [0, 1]:
            out[0] = 0
        out[0] = int(out[0])
        return out
    except Exception:
        return [0]

def change_equipment(equipment, cmd, character_info):
    system_prompt = f"""Ты - DungeonMaster в игре Dungeon&Dragons. Игрок совершил какое-то действие, после которого его инвентарь должен измениться. Тебе необходимо изменить его инвентарь согласно приведенной команде.

Твой ответ должен практически полностью совпадать с инвентарем игрока - тебе необходимо лишь внести некоторые изменения. 

Примеры изменений инвентаря:

1) Инвентарь игрока:
У меня есть щипцы (не знаю, зачем они), кожа щуки, голова тролля
Комманда:
добавить камень
Вывод:
У меня есть щипцы (не знаю, зачем они), кожа щуки, голова тролля. А также камень.

2) Инвентарь игрока:
Недавно я прихватил щит охранника и его доспехи
Не забываем, что ещё и есть чья-то рука
Комманда:
удалить щит и копье
Вывод:
Недавно я прихватил доспехи охранника
Не забываем, что ещё и есть чья-то рука

3) Инвентарь игрока:

Комманда:
добавить голова тролля
Вывод:
Голова тролля

Тебе необходимо произвести изменения над следующим инвентарем:
Инвентарь игрока:
{equipment}

Команда:
{cmd}

Также тебе известна информация о героя:
{character_info}

Помни, что твой ответ должен практически полностью совпадать с инвенарем игрока. 
"""
    out = generate_text(prompt)
    return out